using Document.Generator.Helpers;
using Document.Generator.Models.Xml;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Document.Generator.Formatters
{
    public abstract class DocumentFormatter: IDisposable
    {
        private readonly TextWriter textWriter;
        private readonly ICRefResolver crefResolver;
        private readonly XmlTransformer xmlTransformer;
        private readonly bool leaveOpen;
        private bool needsEpilouge = false;

        public DocumentFormatter(TextWriter textWriter, ICRefResolver crefResolver, string xsltAssetName, bool leaveOpen)
        {
            this.leaveOpen = leaveOpen;
            this.textWriter = textWriter ?? throw new ArgumentNullException(nameof(textWriter));
            this.crefResolver = crefResolver ?? throw new ArgumentNullException(nameof(crefResolver));
            this.xmlTransformer = XmlTransformer.Create(xsltAssetName, crefResolver);
        }

        public virtual void Prologue(string title)
        {
            needsEpilouge = true;
        }

        public virtual void Epilogue()
        {
            BeginTextStyles(TextStyles.Emphasize);
            Text("This document is generated by ");
            Link("https://github.com/Khojasteh/dg", "DG");
            Text(".");
            EndTextStyles(TextStyles.Emphasize);
            needsEpilouge = false;
        }

        public void Text(string text)
        {
            if (!string.IsNullOrEmpty(text))
                RawText(Escape(text));
        }

        public virtual void Text(object value)
        {
            Text(value?.ToString());
        }

        public void Text(string text, TextStyles styles)
        {
            if (!string.IsNullOrEmpty(text))
            {
                BeginTextStyles(styles);
                Text(text);
                EndTextStyles(styles);
            }
        }

        public virtual void Text(object value, TextStyles styles)
        {
            Text(value?.ToString(), styles);
        }

        public void Text(Action contentFactory, TextStyles styles)
        {
            BeginTextStyles(styles);
            contentFactory();
            EndTextStyles(styles);
        }

        public void Text(params object[] values)
        {
            if (values == null)
                return;

            foreach (var value in values)
            {
                switch (value)
                {
                    case null:
                        return;
                    case string text:
                        Text(text);
                        break;
                    case ValueTuple<string, TextStyles> styledText:
                        Text(styledText.Item1, styledText.Item2);
                        break;
                    case ValueTuple<object, TextStyles> styledValue:
                        Text(styledValue.Item1, styledValue.Item2);
                        break;
                    case ValueTuple<Action, TextStyles> styledFactory:
                        Text(styledFactory.Item1, styledFactory.Item2);
                        break;
                    case Action factory:
                        Text(factory);
                        break;
                    default:
                        Text(value);
                        break;
                }
            }
        }

        public void LinkCRef(string cref, string text)
        {
            Link(crefResolver.UrlOf(cref), text ?? crefResolver.NameOf(cref));
        }

        public void LinkCRef(string cref, TextStyles styles, string text)
        {
            Link(crefResolver.UrlOf(cref), () => Text(text ?? crefResolver.NameOf(cref), styles));
        }

        public void Link(string url, string text)
        {
            Link(url, () => Text(text));
        }

        public void Link(string url, string text, TextStyles styles)
        {
            Link(url, () => Text(text, styles));
        }

        public void Link(string url, params object[] values)
        {
            Link(url, () => Text(values));
        }

        public void Header(int level, string text)
        {
            Header(level, () => Text(text), text);
        }

        public void Header(int level, params object[] values)
        {
            Header(level, () => Text(values));
        }

        public void Section(string text)
        {
            Section(() => Text(text));
        }

        public void Section(params object[] values)
        {
            Section(() => Text(values));
        }

        public void Quote(IEnumerable<string> lines)
        {
            Quote(lines, line => Text(line));
        }

        public void Quote(params Action[] lineFactories)
        {
            Quote(Enumerable.Range(0, lineFactories.Length), i => lineFactories[i]());
        }

        public void List(IEnumerable<string> items, bool ordered = false)
        {
            List(items, item => Text(item), ordered);
        }

        public void List(IEnumerable<Action> itemFactories)
        {
            List(itemFactories, factory => factory(), ordered: false);
        }

        public void DefinitionList(IEnumerable<(string Term, string Description)> items)
        {
            DefinitionList(items, item => Text(item.Term, TextStyles.Strong), item => Text(item.Description));
        }

        public virtual void Xml(IEnumerable<XmlNode> xmlElements)
        {
            if (xmlElements != null)
            {
                foreach (var element in xmlElements)
                    Section(() => Xml(element));
            }
        }

        public virtual void Xml(XmlNode xmlElement)
        {
            xmlTransformer.Transform(xmlElement?.ToString(), textWriter);
        }

        protected virtual void RawLineBreak()
        {
            textWriter.Write('\n');
        }

        protected virtual void RawText(string text)
        {
            textWriter.Write(text);
        }

        protected virtual string EscapeUrl(string url)
        {
            return Escape(url);
        }

        #region Abstract Members

        protected abstract string Escape(string text);

        protected abstract void BeginTextStyles(TextStyles styles);

        protected abstract void EndTextStyles(TextStyles styles);

        public abstract void LineBreak();

        public abstract void Code(string code, string lang = null);

        public abstract void Image(string url, string title);

        public abstract void Link(string url, Action contentFactory);

        public abstract void Header(int level, Action contentFactory, string id = null);

        public abstract void Section(Action contentFactory);

        public abstract void Quote<T>(IEnumerable<T> lines, Action<T> lineFactory);

        public abstract void List<T>(IEnumerable<T> items, Action<T> itemFactory, bool ordered = false);

        public abstract void DefinitionList<T>(IEnumerable<T> items, Action<T> termFactory, Action<T> contentFactory);

        public abstract void Table<T>(IEnumerable<object> columns, IEnumerable<T> rows, params Action<T>[] columnFactories);

        #endregion

        #region IDisposable

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (needsEpilouge)
                {
                    Epilogue();
                }
                if (!leaveOpen)
                {
                    textWriter.Dispose();
                }
                disposed = true;
            }
        }

        public void Dispose()
        {
            Dispose(true);
        }

        #endregion
    }
}
